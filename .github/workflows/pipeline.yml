name: pipeline
on: push

env:
  RELEASE_FILE: RELEASE.txt

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Ensure musl is installed
      run: sudo apt-get install -y musl musl-dev musl-tools
    - name: Ensure that x86_64-unknown-linux-musl target is installed
      run: rustup target add x86_64-unknown-linux-musl
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Check README.md synchronization
      run: |
        cargo install --force cargo-sync-readme
        cargo sync-readme -c
    - name: Scan code
      run: |
        rustup component add clippy
        cargo clippy --all-targets --all-features -- -D warnings
    - name: Execute tests
      run: make test
    - name: Build function
      run: GCC=musl-gcc make build

  tag:
    if: github.ref == 'refs/heads/master'
    needs: check
    name: tag and release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Tag
      id: tag
      uses: anothrNick/github-tag-action@1.19.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: false
        RELEASE_BRANCHES: master
        DEFAULT_BUMP: patch
    - name: create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.new_tag}}
        release_name: ${{ steps.tag.outputs.new_tag }}
        body: |
          Release ${{ steps.tag.outputs.new_tag }}.
        draft: false
        prerelease: true
    - run: printf ${{ steps.create_release.outputs.upload_url }} > ${{ env.RELEASE_FILE }}
    - name: Upload release data
      uses: actions/upload-artifact@v1.0.0
      with:
        name: RELEASE
        path: ${{ env.RELEASE_FILE }}

  # publish-cratesio:
  #   needs: tag
  #   name: crates.io
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Get version
  #     id: get_version
  #     run: echo ::set-output name=VERSION::$(git tag --points-at HEAD --sort -version:refname | head -1)
  #   - name: Publish
  #     id: publish
  #     run: |
  #       VERSION=${{ steps.get_version.outputs.VERSION }} make update-version && 
  #       cargo login ${{ secrets.CRATES_IO_TOKEN }} && 
  #       cargo publish --allow-dirty
